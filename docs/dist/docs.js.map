{"version":3,"sources":["src/js/numbers.js","src/js/rangetouch.js","src/js/css.js","src/js/events.js","docs/src/js/docs.js"],"names":["round","number","step","places","value","match","concat","Math","max","length","getDecimalPlaces","parseFloat","toFixed","RangeTouch","a","selector","arguments","options","_classCallCheck","this","elements","document","querySelectorAll","config","Object","assign","addCSS","thumbWidth","watch","setup","key","documentElement","css","sheet","existing","getElementById","nodeName","toLowerCase","style","createElement","id","appendChild","createTextNode","head","insertRule","forEach","type","body","addEventListener","event","element","Array","from","includes","call","matches","target","set","percent","input","touch","changedTouches","min","getAttribute","clientRect","getBoundingClientRect","width","clientX","left","disabled","preventDefault","get","Event","dispatchEvent","trigger","loadSprite","url","xhr","XMLHttpRequest","open","onload","container","setAttribute","innerHTML","responseText","insertBefore","childNodes","send","window","loadSprites","sprites","shr","count"],"mappings":"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","file":"docs.js","sourcesContent":["// Get the number of decimal places\nexport function getDecimalPlaces(value) {\n    const match = `${value}`.match(/(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/);\n\n    if (!match) {\n        return 0;\n    }\n\n    return Math.max(\n        0,\n        // Number of digits right of decimal point.\n        (match[1] ? match[1].length : 0) -\n            // Adjust for scientific notation.\n            (match[2] ? +match[2] : 0),\n    );\n}\n\n// Round to the nearest step\nexport function round(number, step) {\n    if (step < 1) {\n        const places = getDecimalPlaces(step);\n        return parseFloat(number.toFixed(places));\n    }\n    return Math.round(number / step) * step;\n}\n","// ==========================================================================\n// rangetouch.js v2.0.0\n// Making <input type=\"range\"> work on touch devices\n// https://github.com/sampotts/rangetouch\n// License: The MIT License (MIT)\n// ==========================================================================\n\nimport { addCSS, matches } from './css';\nimport trigger from './events';\nimport { round } from './numbers';\n\nclass RangeTouch {\n    constructor(selector = '[type=\"range\"]', options = {}) {\n        this.selector = selector;\n        this.elements = document.querySelectorAll(selector);\n        this.config = Object.assign(\n            {\n                addCSS: true,\n                thumbWidth: 15,\n                watch: true,\n            },\n            options,\n        );\n\n        this.setup();\n    }\n\n    setup() {\n        // Bail if not a touch enabled device\n        if (!('ontouchstart' in document.documentElement)) {\n            return;\n        }\n\n        // Add useful CSS\n        if (this.config.addCSS) {\n            addCSS(\n                this.selector,\n                'user-select: none; -webkit-user-select: none; touch-action: manipulation',\n            );\n        }\n\n        // Listen for events\n        const events = ['touchstart', 'touchmove', 'touchend'];\n\n        events.forEach(type => {\n            document.body.addEventListener(\n                type,\n                event => {\n                    if (!matches(event.target, this.selector)) {\n                        return;\n                    }\n                    this.set(event);\n                },\n                false,\n            );\n        });\n    }\n\n    // Get the value based on touch position\n    get(event) {\n        const input = event.target;\n        const touch = event.changedTouches[0];\n        const min = parseFloat(input.getAttribute('min')) || 0;\n        const max = parseFloat(input.getAttribute('max')) || 100;\n        const step = parseFloat(input.getAttribute('step')) || 1;\n        const delta = max - min;\n\n        // Calculate percentage\n        let percent;\n        const clientRect = input.getBoundingClientRect();\n        const thumbWidth =\n            ((100 / clientRect.width) * (this.config.thumbWidth / 2)) / 100;\n\n        // Determine left percentage\n        percent = (100 / clientRect.width) * (touch.clientX - clientRect.left);\n\n        // Don't allow outside bounds\n        if (percent < 0) {\n            percent = 0;\n        } else if (percent > 100) {\n            percent = 100;\n        }\n\n        // Factor in the thumb offset\n        if (percent < 50) {\n            percent -= (100 - percent * 2) * thumbWidth;\n        } else if (percent > 50) {\n            percent += (percent - 50) * 2 * thumbWidth;\n        }\n\n        // Find the closest step to the mouse position\n        return min + round(delta * (percent / 100), step);\n    }\n\n    // Update range value based on position\n    set(event) {\n        if (event.target.disabled) {\n            return;\n        }\n\n        // Prevent text highlight on iOS\n        event.preventDefault();\n\n        // Set value\n        event.target.value = this.get(event);\n\n        // Trigger event\n        trigger(event.target, event.type === 'touchend' ? 'change' : 'input');\n    }\n}\n\nexport default RangeTouch;\n","// Inject CSS to the page\nexport function addCSS(selector, css) {\n    const id = 'rangetouch';\n    const existing = document.getElementById(id);\n    let sheet;\n\n    if (existing && existing.nodeName.toLowerCase() === 'style') {\n        ({ sheet } = existing);\n    } else {\n        const style = document.createElement('style');\n        style.id = id;\n        style.appendChild(document.createTextNode(''));\n        document.head.appendChild(style);\n        ({ sheet } = style);\n    }\n\n    sheet.insertRule(`${selector} { ${css} }`, 0);\n}\n\n// Element matches a selector\nexport function matches(element, selector) {\n    const prototype = { Element };\n\n    function match() {\n        return Array.from(document.querySelectorAll(selector)).includes(this);\n    }\n\n    const matches =\n        prototype.matches ||\n        prototype.webkitMatchesSelector ||\n        prototype.mozMatchesSelector ||\n        prototype.msMatchesSelector ||\n        match;\n\n    return matches.call(element, selector);\n}\n","// Trigger event\nexport default function trigger(element, type) {\n    if (!element || !type) {\n        return;\n    }\n\n    // Create and dispatch the event\n    const event = new Event(type);\n\n    // Dispatch the event\n    element.dispatchEvent(event);\n}\n","// ==========================================================================\n// Docs example\n// ==========================================================================\n\nimport RangeTouch from '../../../src/js/rangetouch';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    function loadSprite(url) {\n        const xhr = new XMLHttpRequest();\n        const { body } = document;\n\n        // Check for CORS support\n        // If you're loading from same domain, you can remove the whole if/else statement\n        // XHR for Chrome/Firefox/Opera/Safari/IE10+\n        if (!('withCredentials' in xhr)) {\n            return;\n        }\n\n        xhr.open('GET', url, true);\n\n        // Inject hidden div with sprite on load\n        xhr.onload = () => {\n            const container = document.createElement('div');\n            container.setAttribute('hidden', '');\n            container.innerHTML = xhr.responseText;\n            body.insertBefore(container, body.childNodes[0]);\n        };\n\n        xhr.send();\n    }\n\n    window.loadSprites = sprites => {\n        sprites.forEach(loadSprite);\n    };\n\n    // Setup shr\n    window.shr.setup({\n        count: {\n            classname: 'btn__count',\n        },\n    });\n\n    // Set range thumb size\n    // window.rangetouch.set('thumbWidth', 20);\n\n    const rangetouch = new RangeTouch('#example', { thumbWidth: 20 });\n});\n"]}